"""
Auto Generated models.py
You may need to change some parts
"""
from django.db import models
from django.utils.translation import ugettext_lazy as _
{% if validator_support %}
from importlib import import_module
validators = import_module('django.core.validators')
{% endif %}
{% if signal_support %}
from django.db.models import signals
{% endif %}
{% for model in models %}

class {{model.name}}(models.Model):
    """
    {{model.name}} Model
    Auto generated
    """
    {% for field in model.fields %}
    {% if field.type %}
    {{field.name}} = models.{{field.type}}({% for attr in field.attrs %}
             {% if attr.key == 'on_delete' %}{{attr.key}}=models.{{attr.value}},{% else %}{{attr.key}}={{attr.value}},{%endif%}{% endfor %}
             {% if field.validators %}
             validators=[
                {% for validator in field.validators %}
                getattr(validators, '{{validator.func}}')({{validator.arg}}),
                {% endfor %}
             ]
             {% endif %}
    )
    {% endif %}
    {% endfor %}

    def __str__(self):
        return {% if model.get_str %} f"{{model.get_str}}" {% else %} None {% endif %} # you may change this section

    class Meta:
        verbose_name = _("{{model.verbose_name}}")  # auto generated verbose_name
        verbose_name_plural = _("{{model.verbose_name_plural}}")

{% endfor %}
{% if signal_support %}# Signals{% endif %}
{% for signal in signals %}
def {{signal.model_b.lower()}}_post_save(sender, instance, created, **kwargs):
    if created:
        {{signal.model_a}}.objects.create({{signal.field}}=instance)
signals.post_save.connect({{signal.model_b.lower()}}_post_save, sender={{signal.model_b}})
{% endfor %}